name: Build and Push Docker Image

on:
  # Weekly builds on Sundays at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'

  # Manual trigger
  workflow_dispatch:

  # Build on pushes to main branch
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - 'package-lists/**'
      - '.github/workflows/build-and-push.yml'

  # Build on pull requests to test changes
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - 'package-lists/**'
      - '.github/workflows/build-and-push.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for main branch
            type=ref,event=branch
            # Weekly tag for scheduled builds
            type=schedule,pattern=weekly-{{date 'YYYY-MM-DD'}}
            # SHA tag for commits
            type=sha,prefix={{branch}}-
            # Latest tag
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=R Package Development Environment
            org.opencontainers.image.description=Docker image based on rig-r with pre-installed R package development dependencies
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build but don't push for PRs
          load: ${{ github.event_name == 'pull_request' }}

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@e2f20e631ae6d7dd3b768f56a5d2af784dd54791
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Summary
        if: success()
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "**Registry:** Image pushed to GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Usage:** \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Registry:** Image built but not pushed (PR)" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && github.event_name == 'schedule'
    permissions:
      packages: write

    steps:
      - name: Delete old weekly images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 4
          delete-only-pre-release-versions: false
          token: ${{ secrets.GITHUB_TOKEN }}
